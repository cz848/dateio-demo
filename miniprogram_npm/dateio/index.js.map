{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/**\n * 统一处理日期或格式化输出\n * Author: Tyler.Chao\n * github: https://github.com/cz848/dateio\n */\n\n// 位数不够前补0，为了更好的兼容，用slice替代padStart\nconst zeroFill = (number, targetLength) => `00${number}`.slice(-targetLength || -2);\n\n// 首字母大写\nconst capitalize = str => str.replace(/^[a-z]/, a => a.toUpperCase());\n\n// 取整数部分\nconst intPart = n => Number.parseInt(n, 10);\n\n// 匹配不同方法的正则\nconst formatsRegExp = /MS|ms|[YMDWHISAUymdwhisau]/g;\nconst getUnitRegExp = /^(?:MS|ms|[YMDWHISAUymdwhisau])$/;\nconst setUnitRegExp = /^(?:ms|[Uymdhisu])$/;\nconst addUnitRegExp = /^([+-]?\\d+(?:\\.\\d+)?)(ms|[ymdwhis])?$/;\n// 每个时间单位对应的毫秒数\nconst unitStep = {\n  ms: 1,\n  s: 1e3,\n  i: 6e4,\n  h: 36e5,\n  d: 864e5,\n  w: 864e5 * 7,\n  m: 864e5 * 30, // ~\n  y: 864e5 * 365, // ~\n};\n// 语言包\nlet I18N = {\n  weekdays: ['日', '一', '二', '三', '四', '五', '六'],\n  // 默认四个时段，可根据需要增减\n  interval: ['凌晨', '上午', '下午', '晚上'],\n};\n\n// 设置语言包\nconst locale = config => {\n  if (config instanceof Object && !Array.isArray(config)) I18N = { ...I18N, ...config };\n  return I18N;\n};\n\n// from moment.js in order to keep the same result\nconst monthDiff = (a, b) => {\n  const wholeMonthDiff = (b.y() - a.y()) * 12 + (b.m() - a.m());\n  const anchor = a.clone().add(wholeMonthDiff, 'm');\n  const anchor2 = a.clone().add(wholeMonthDiff + (b > anchor ? 1 : -1), 'm');\n  return -(wholeMonthDiff + (b - anchor) / Math.abs(anchor2 - anchor)) || 0;\n};\n\n// 转换为可识别的日期格式\nconst toDate = input => {\n  if (!(input || input === 0)) return new Date();\n  if (typeof input === 'string' && !/Z$/i.test(input)) return new Date(input.replace(/-/g, '/'));\n  // TODO: 与原生行为有出入\n  if (Array.isArray(input) && input.length !== 1) return new Date(...input);\n  return new Date(input);\n};\n\nclass DateIO {\n  constructor(input) {\n    this.I18N = locale();\n    this.init(input);\n  }\n\n  init(input) {\n    this.$date = toDate(input);\n    return this;\n  }\n\n  $get(type) {\n    const value = this.$date[`get${capitalize(type)}`]();\n    return value + Number(type === 'month');\n  }\n\n  $set(type, ...input) {\n    // 处理原生月份的偏移量\n    if (type === 'fullYear' && input.length > 1) input[1] -= 1;\n    else if (type === 'month') input[0] -= 1;\n    this.$date[`set${capitalize(type)}`](...input);\n    return this;\n  }\n\n  // 年\n  // 100...2020\n  y(...input) {\n    return input.length ? this.$set('fullYear', ...input) : this.$get('fullYear');\n  }\n\n  // 年 (4位)\n  // 0100...2020\n  Y() {\n    return zeroFill(this.y(), 4);\n  }\n\n  // 加偏移后的月\n  // 1...12\n  m(...input) {\n    return input.length ? this.$set('month', ...input) : this.$get('month');\n  }\n\n  // 月 (前导0)\n  // 01...12\n  M() {\n    return zeroFill(this.m());\n  }\n\n  // 日\n  // 1...31\n  d(...input) {\n    return input.length ? this.$set('date', ...input) : this.$get('date');\n  }\n\n  // 日 (前导0)\n  // 01...31\n  D() {\n    return zeroFill(this.d());\n  }\n\n  // 周几\n  // 0...6\n  w() {\n    return this.$get('day');\n  }\n\n  // 周几\n  // 本地化后的星期x\n  W() {\n    return this.I18N.weekdays[this.w()];\n  }\n\n  // 24小时制\n  // 0...23\n  h(...input) {\n    return input.length ? this.$set('hours', ...input) : this.$get('hours');\n  }\n\n  // 24小时制 (前导0)\n  // 00...23\n  H() {\n    return zeroFill(this.h());\n  }\n\n  // 分\n  // 0...59\n  i(...input) {\n    return input.length ? this.$set('minutes', ...input) : this.$get('minutes');\n  }\n\n  // 分 (前导0)\n  // 00...59\n  I() {\n    return zeroFill(this.i());\n  }\n\n  // 秒\n  // 0...59\n  s(...input) {\n    return input.length ? this.$set('seconds', ...input) : this.$get('seconds');\n  }\n\n  // 秒 (前导0)\n  // 00...59\n  S() {\n    return zeroFill(this.s());\n  }\n\n  // 毫秒数\n  // 0...999\n  ms(...input) {\n    return input.length ? this.$set('milliseconds', ...input) : this.$get('milliseconds');\n  }\n\n  MS() {\n    return zeroFill(this.ms(), 3);\n  }\n\n  // 时间段\n  a() {\n    return this.I18N.interval[Math.floor((this.h() / 24) * this.I18N.interval.length)];\n  }\n\n  // 时间段\n  A() {\n    return this.a().toUpperCase();\n  }\n\n  // unix 偏移量 (毫秒)\n  // 0...1571136267050\n  u(...input) {\n    return input.length ? this.init(input[0]) : this.valueOf();\n  }\n\n  // Unix 时间戳 (秒)\n  // 0...1542759768\n  U(...input) {\n    return input.length ? this.init(input[0] * 1000) : Math.round(this / 1000);\n  }\n\n  // 获取以上格式的日期，每个unit对应其中一种格式\n  get(unit = '') {\n    return getUnitRegExp.test(unit) ? this[unit]() : undefined;\n  }\n\n  // 设置以上格式的日期\n  set(unit = '', ...input) {\n    return setUnitRegExp.test(unit) ? this[unit](...input) : this;\n  }\n\n  toDate() {\n    return this.$date;\n  }\n\n  toString() {\n    return this.$date.toString();\n  }\n\n  toLocaleString(...input) {\n    return this.$date.toLocaleString(...input);\n  }\n\n  valueOf() {\n    return this.$date.valueOf();\n  }\n\n  clone() {\n    return new DateIO(+this.$date);\n  }\n\n  // 利用格式化串格式化日期\n  format(formats) {\n    return String(formats || 'Y-M-D H:I:S').replace(formatsRegExp, unit => this[unit]());\n  }\n\n  // 开始于，默认ms\n  startOf(unit, isStartOf = true) {\n    let formats = 'y m d h i s';\n    formats = formats.slice(0, formats.indexOf(unit === 'w' ? 'd' : unit) + 1);\n    if (!formats) return this;\n    const dates = this.format(formats).split(' ');\n     // 分别对应年/月/日/时/分/秒/毫秒\n    const starts = [0, 1, 1, 0, 0, 0, 0];\n    const ends = [0, 12, 0, 23, 59, 59, 999];\n    const input = isStartOf ? starts : ends;\n    input.splice(0, dates.length, ...dates);\n    if (isStartOf || !/^[ym]$/.test(unit)) input[1] -= 1;\n    if (unit === 'w') input[2] -= this.w() - (isStartOf ? 0 : 6);\n    return this.init(input);\n  }\n\n  // 结束于，默认ms\n  endOf(unit) {\n    return this.startOf(unit, false);\n  }\n\n  // 返回两个日期的差值，精确到毫秒\n  // unit: ms: milliseconds(default)|s: seconds|i: minutes|h: hours|d: days|w: weeks|m: months|y: years\n  // isFloat: 是否返回小数\n  diff(input, unit, isFloat = false) {\n    const that = new DateIO(input);\n    const md = monthDiff(this, that);\n    let diff = this - that;\n    if (unit === 'y') diff = md / 12;\n    else if (unit === 'm') diff = md;\n    else diff /= unitStep[unit] || 1;\n\n    return isFloat ? diff : intPart(diff);\n  }\n\n  // 对日期进行+-运算，默认精确到毫秒，可传小数\n  // input: '7d', '-1m', '10y', '5.5h'等或数字。\n  // unit: 'y', 'm', 'd', 'w', 'h', 'i', 's', 'ms'。\n  add(input, unit = 'ms') {\n    const pattern = String(input).match(addUnitRegExp);\n    if (!pattern) return this;\n\n    const addUnit = pattern[2] || unit;\n    let number = Number(pattern[1]);\n    // 年月整数部分单独处理，小数部分暂时按365天和30天处理，有一定误差\n    if (/^[ym]$/.test(addUnit)) {\n      this.set(addUnit, this[addUnit]() + intPart(number));\n      number = Number(String(number).replace(/^(-?)\\d+(?=\\.?)/g, '$10'));\n    }\n\n    return number ? this.init(number * unitStep[addUnit] + this.valueOf()) : this;\n  }\n\n  subtract(input, unit) {\n    return this.add(`-${input}`, unit);\n  }\n\n  // 是否为闰年\n  isLeapYear() {\n    const y = this.y();\n    return y % 100 ? y % 4 === 0 : y % 400 === 0;\n  }\n\n  // 获取某月有多少天\n  daysInMonth() {\n    const monthDays = [31, 28 + Number(this.isLeapYear()), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    return monthDays[this.m() - 1];\n  }\n\n  // 比较两个日期是否具有相同的年/月/日/时/分/秒，默认精确比较到毫秒\n  isSame(input, unit) {\n    return +this.clone().startOf(unit) === +new DateIO(input).startOf(unit);\n  }\n}\n\nconst dateio = input => new DateIO(input);\n\ndateio.prototype = DateIO.prototype;\n\ndateio.locale = locale;\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = dateio;\n"]}